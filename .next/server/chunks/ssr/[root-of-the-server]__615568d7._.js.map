{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 207, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 228, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/ai/flows/detect-distraction.ts"],"sourcesContent":["// src/ai/flows/detect-distraction.ts\n'use server';\n\n/**\n * @fileOverview Detects if the user is distracted based on current activity and approved websites.\n *\n * - detectDistraction - A function that detects user distraction.\n * - DetectDistractionInput - The input type for the detectDistraction function.\n * - DetectDistractionOutput - The return type for the detectDistraction function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst DetectDistractionInputSchema = z.object({\n  currentActivity: z.string().describe('The currently active application or website.'),\n  approvedWebsites: z.array(z.string()).describe('A list of approved websites for the current task.'),\n  taskDescription: z.string().describe('A description of the current task.'),\n});\nexport type DetectDistractionInput = z.infer<typeof DetectDistractionInputSchema>;\n\nconst DetectDistractionOutputSchema = z.object({\n  isDistracted: z.boolean().describe('Whether the user is distracted from the current task.'),\n  distractionReason: z.string().describe('The reason for the distraction, if any.'),\n});\nexport type DetectDistractionOutput = z.infer<typeof DetectDistractionOutputSchema>;\n\nexport async function detectDistraction(input: DetectDistractionInput): Promise<DetectDistractionOutput> {\n  return detectDistractionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'detectDistractionPrompt',\n  input: {schema: DetectDistractionInputSchema},\n  output: {schema: DetectDistractionOutputSchema},\n  prompt: `You are an AI assistant that helps users stay focused on their tasks.\n\nYou will be given the user's current activity (application or website), a list of approved websites for the current task, and a description of the task.\n\nYour job is to determine if the user is distracted from their task. If the user is on an unapproved website, or using an application unrelated to the task, you should set isDistracted to true and provide a reason for the distraction.\n\nIf the user is on an approved website or using an application related to the task, you should set isDistracted to false and the reason for the distraction to \"\".\n\nCurrent Task: {{{taskDescription}}}\nApproved Websites: {{#each approvedWebsites}}{{{this}}}{{#unless @last}}, {{/unless}}{{/each}}\nCurrent Activity: {{{currentActivity}}}\n\nOutput in JSON format:\n`,\n});\n\nconst detectDistractionFlow = ai.defineFlow(\n  {\n    name: 'detectDistractionFlow',\n    inputSchema: DetectDistractionInputSchema,\n    outputSchema: DetectDistractionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":"AAAA,qCAAqC;;;;;;AAGrC;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC5C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACrC,kBAAkB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;IAC/C,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,cAAc,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IACnC,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACzC;AAGO,eAAe,kBAAkB,KAA6B;IACnE,OAAO,sBAAsB;AAC/B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA4B;IAC5C,QAAQ;QAAC,QAAQ;IAA6B;IAC9C,QAAQ,CAAC;;;;;;;;;;;;;AAaX,CAAC;AACD;AAEA,MAAM,wBAAwB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACzC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 302, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/ai/flows/extract-websites.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Extracts website domains from a natural language description of tools.\n *\n * - extractWebsites - A function that extracts website domains.\n * - ExtractWebsitesInput - The input type for the extractWebsites function.\n * - ExtractWebsitesOutput - The return type for the extractWebsites function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst ExtractWebsitesInputSchema = z.object({\n  toolsDescription: z.string().describe('A natural language description of the tools and websites the user plans to use.'),\n});\nexport type ExtractWebsitesInput = z.infer<typeof ExtractWebsitesInputSchema>;\n\nconst ExtractWebsitesOutputSchema = z.object({\n  websites: z.array(z.string()).describe('A list of root domains (e.g., google.com, github.com) extracted from the description. Include common subdomains if relevant (e.g., docs.google.com).'),\n});\nexport type ExtractWebsitesOutput = z.infer<typeof ExtractWebsitesOutputSchema>;\n\nexport async function extractWebsites(input: ExtractWebsitesInput): Promise<ExtractWebsitesOutput> {\n  return extractWebsitesFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'extractWebsitesPrompt',\n  input: {schema: ExtractWebsitesInputSchema},\n  output: {schema: ExtractWebsitesOutputSchema},\n  prompt: `You are an AI assistant that helps users configure their focus sessions. Your task is to extract a list of relevant website domains from a user's description of the tools they need.\n\nFrom the user's description below, identify the key websites, services, or applications they will use. For each, provide the root domain and any common subdomains. For example, if they say \"Google Docs and my company's GitHub\", you should extract \"docs.google.com\", \"google.com\", and \"github.com\". If they mention a specific app like \"VS Code\", you don't need to add a website unless they specify using a web version.\n\nUser's Description of Tools: {{{toolsDescription}}}\n\nOutput the list of domains in JSON format.\n`,\n});\n\nconst extractWebsitesFlow = ai.defineFlow(\n  {\n    name: 'extractWebsitesFlow',\n    inputSchema: ExtractWebsitesInputSchema,\n    outputSchema: ExtractWebsitesOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,6BAA6B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1C,kBAAkB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACxC;AAGA,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3C,UAAU,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC;AACzC;AAGO,eAAe,gBAAgB,KAA2B;IAC/D,OAAO,oBAAoB;AAC7B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA0B;IAC1C,QAAQ;QAAC,QAAQ;IAA2B;IAC5C,QAAQ,CAAC;;;;;;;AAOX,CAAC;AACD;AAEA,MAAM,sBAAsB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACvC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA3BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 366, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/ai/flows/generate-focus-question.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview Generates a question to check if the user is focused on their task.\n *\n * - generateFocusQuestion - A function that generates a focus check-in question.\n * - GenerateFocusQuestionInput - The input type for the function.\n * - GenerateFocusQuestionOutput - The return type for the function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst GenerateFocusQuestionInputSchema = z.object({\n  taskDescription: z.string().describe('The description of the current task.'),\n});\nexport type GenerateFocusQuestionInput = z.infer<typeof GenerateFocusQuestionInputSchema>;\n\nconst GenerateFocusQuestionOutputSchema = z.object({\n  question: z.string().describe('A short, encouraging question to check the user\\'s progress on their task.'),\n});\nexport type GenerateFocusQuestionOutput = z.infer<typeof GenerateFocusQuestionOutputSchema>;\n\nexport async function generateFocusQuestion(input: GenerateFocusQuestionInput): Promise<GenerateFocusQuestionOutput> {\n  return generateFocusQuestionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'generateFocusQuestionPrompt',\n  input: {schema: GenerateFocusQuestionInputSchema},\n  output: {schema: GenerateFocusQuestionOutputSchema},\n  prompt: `You are a friendly and encouraging productivity coach. Your goal is to help the user stay focused.\n\nBased on the user's current task description, generate a single, short, and friendly question to check on their progress. The question should be specific to their task and sound encouraging.\n\nDo not ask generic questions like \"How is it going?\". Instead, ask about a potential milestone or part of the task.\n\nExample Task: 'Write a blog post about AI in marketing'\nGood Question: 'Have you outlined the main points for your blog post yet?'\n\nExample Task: 'Refactor the user authentication flow'\nGood Question: 'How is the refactoring of the login component coming along?'\n\nUser's Task: {{{taskDescription}}}\n\nGenerate a question now.\n`,\n});\n\nconst generateFocusQuestionFlow = ai.defineFlow(\n  {\n    name: 'generateFocusQuestionFlow',\n    inputSchema: GenerateFocusQuestionInputSchema,\n    outputSchema: GenerateFocusQuestionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AACA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,mCAAmC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChD,iBAAiB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACvC;AAGA,MAAM,oCAAoC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,eAAe,sBAAsB,KAAiC;IAC3E,OAAO,0BAA0B;AACnC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAgC;IAChD,QAAQ;QAAC,QAAQ;IAAiC;IAClD,QAAQ,CAAC;;;;;;;;;;;;;;;AAeX,CAAC;AACD;AAEA,MAAM,4BAA4B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC7C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 446, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/lib/supabase-server.ts"],"sourcesContent":["import { createServerClient, type CookieOptions } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\n\nexport const createClient = async () => {\n  const cookieStore = await cookies()\n  return createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        get(name: string) {\n          return cookieStore.get(name)?.value\n        },\n        set(name: string, value: string, options: CookieOptions) {\n          cookieStore.set({ name, value, ...options })\n        },\n        remove(name: string, options: CookieOptions) {\n          cookieStore.set({ name, value: '', ...options })\n        },\n      },\n    }\n  )\n}\n\n// For compatibility with the existing codebase\nexport const createServerComponentClient = async () => {\n  return await createClient()\n}"],"names":[],"mappings":";;;;AAAA;AAAA;AACA;;;AAEO,MAAM,eAAe;IAC1B,MAAM,cAAc,MAAM,CAAA,GAAA,+HAAA,CAAA,UAAO,AAAD;IAChC,OAAO,CAAA,GAAA,yKAAA,CAAA,qBAAkB,AAAD,sUAGtB;QACE,SAAS;YACP,KAAI,IAAY;gBACd,OAAO,YAAY,GAAG,CAAC,OAAO;YAChC;YACA,KAAI,IAAY,EAAE,KAAa,EAAE,OAAsB;gBACrD,YAAY,GAAG,CAAC;oBAAE;oBAAM;oBAAO,GAAG,OAAO;gBAAC;YAC5C;YACA,QAAO,IAAY,EAAE,OAAsB;gBACzC,YAAY,GAAG,CAAC;oBAAE;oBAAM,OAAO;oBAAI,GAAG,OAAO;gBAAC;YAChD;QACF;IACF;AAEJ;AAGO,MAAM,8BAA8B;IACzC,OAAO,MAAM;AACf","debugId":null}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/app/actions.ts"],"sourcesContent":["// src/app/actions.ts\n'use server';\n\nimport { detectDistraction, type DetectDistractionInput, type DetectDistractionOutput } from '@/ai/flows/detect-distraction';\nimport { extractWebsites, type ExtractWebsitesInput } from '@/ai/flows/extract-websites';\nimport { generateFocusQuestion, type GenerateFocusQuestionInput, type GenerateFocusQuestionOutput } from '@/ai/flows/generate-focus-question';\nimport { createServerComponentClient } from '@/lib/supabase-server';\n\nexport async function checkDistractionAction(input: DetectDistractionInput): Promise<DetectDistractionOutput> {\n  try {\n    const result = await detectDistraction(input);\n    return result;\n  } catch (error) {\n    console.error('Error in checkDistractionAction:', error);\n    return {\n      isDistracted: false,\n      distractionReason: 'Could not check activity due to an AI service error.',\n    };\n  }\n}\n\nexport async function extractWebsitesAction(input: ExtractWebsitesInput): Promise<string[]> {\n    try {\n        const result = await extractWebsites(input);\n        return result.websites;\n    } catch (error) {\n        console.error('Error in extractWebsitesAction:', error);\n        // Return an empty array or handle the error as needed\n        return [];\n    }\n}\n\nexport async function generateFocusQuestionAction(input: GenerateFocusQuestionInput): Promise<GenerateFocusQuestionOutput> {\n    try {\n        const result = await generateFocusQuestion(input);\n        return result;\n    } catch (error) {\n        console.error('Error in generateFocusQuestionAction:', error);\n        return {\n            question: 'Are you staying on task?',\n        };\n    }\n}\n\nexport async function updateFlowStatusAction(flowId: string, status: 'completed' | 'abandoned', actualEndTime?: Date): Promise<{ success: boolean; error?: string }> {\n  try {\n    const supabase = await createServerComponentClient();\n    \n    // Get the current user\n    const { data: { user }, error: authError } = await supabase.auth.getUser();\n    \n    if (authError || !user) {\n      return { success: false, error: 'Authentication required' };\n    }\n\n    // Update the flow with new status and actual end time\n    const updateData: any = {\n      status,\n      end_time: actualEndTime || new Date(),\n    };\n\n    const { error } = await supabase\n      .from('flows')\n      .update(updateData)\n      .eq('id', flowId)\n      .eq('user_id', user.id); // Ensure user can only update their own flows\n\n    if (error) {\n      console.error('Error updating flow status:', error);\n      return { success: false, error: error.message };\n    }\n\n    return { success: true };\n  } catch (error) {\n    console.error('Error in updateFlowStatusAction:', error);\n    return { success: false, error: 'Unknown error occurred' };\n  }\n}\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;;;;;;AAGrB;AACA;AACA;AACA;;;;;;;;AAEO,eAAe,uBAAuB,KAA6B;IACxE,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,2IAAA,CAAA,oBAAiB,AAAD,EAAE;QACvC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO;YACL,cAAc;YACd,mBAAmB;QACrB;IACF;AACF;AAEO,eAAe,sBAAsB,KAA2B;IACnE,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,yIAAA,CAAA,kBAAe,AAAD,EAAE;QACrC,OAAO,OAAO,QAAQ;IAC1B,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,mCAAmC;QACjD,sDAAsD;QACtD,OAAO,EAAE;IACb;AACJ;AAEO,eAAe,4BAA4B,KAAiC;IAC/E,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,mJAAA,CAAA,wBAAqB,AAAD,EAAE;QAC3C,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,yCAAyC;QACvD,OAAO;YACH,UAAU;QACd;IACJ;AACJ;AAEO,eAAe,uBAAuB,MAAc,EAAE,MAAiC,EAAE,aAAoB;IAClH,IAAI;QACF,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD;QAEjD,uBAAuB;QACvB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,OAAO,SAAS,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,OAAO;QAExE,IAAI,aAAa,CAAC,MAAM;YACtB,OAAO;gBAAE,SAAS;gBAAO,OAAO;YAA0B;QAC5D;QAEA,sDAAsD;QACtD,MAAM,aAAkB;YACtB;YACA,UAAU,iBAAiB,IAAI;QACjC;QAEA,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,SACrB,IAAI,CAAC,SACL,MAAM,CAAC,YACP,EAAE,CAAC,MAAM,QACT,EAAE,CAAC,WAAW,KAAK,EAAE,GAAG,8CAA8C;QAEzE,IAAI,OAAO;YACT,QAAQ,KAAK,CAAC,+BAA+B;YAC7C,OAAO;gBAAE,SAAS;gBAAO,OAAO,MAAM,OAAO;YAAC;QAChD;QAEA,OAAO;YAAE,SAAS;QAAK;IACzB,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,oCAAoC;QAClD,OAAO;YAAE,SAAS;YAAO,OAAO;QAAyB;IAC3D;AACF;;;IArEsB;IAaA;IAWA;IAYA;;AApCA,+OAAA;AAaA,+OAAA;AAWA,+OAAA;AAYA,+OAAA","debugId":null}},
    {"offset": {"line": 593, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/.next-internal/server/app/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {generateFocusQuestionAction as '4074340c73375fb6809e8b2add8de389ae6f983d05'} from 'ACTIONS_MODULE0'\nexport {updateFlowStatusAction as '70f7f492523db07d60f3bc674c12e60045893853ea'} from 'ACTIONS_MODULE0'\nexport {extractWebsitesAction as '40fe6b84f52c42f71f2f2833eb70af2a9a93fb175a'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 651, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/components/focus-flow-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const FocusFlowDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call FocusFlowDashboard() from the server but FocusFlowDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/focus-flow-dashboard.tsx <module evaluation>\",\n    \"FocusFlowDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,yEACA","debugId":null}},
    {"offset": {"line": 665, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/components/focus-flow-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const FocusFlowDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call FocusFlowDashboard() from the server but FocusFlowDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/components/focus-flow-dashboard.tsx\",\n    \"FocusFlowDashboard\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,qBAAqB,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACpD;IAAa,MAAM,IAAI,MAAM;AAAoP,GACjR,qDACA","debugId":null}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 689, "column": 0}, "map": {"version":3,"sources":["file:///home/subash/focusflow/src/app/page.tsx"],"sourcesContent":["import { FocusFlowDashboard } from '@/components/focus-flow-dashboard';\nimport { createServerComponentClient } from '@/lib/supabase-server';\nimport { cookies } from 'next/headers';\nimport { redirect } from 'next/navigation';\n\nexport default async function Home() {\n  const supabase = await createServerComponentClient();\n  const { data: { session } } = await supabase.auth.getSession();\n\n  if (!session) {\n    redirect('/auth/login');\n  }\n\n  return (\n    <main className=\"flex min-h-screen w-full flex-col items-center bg-background p-4 pt-12 sm:p-8 md:p-12\">\n      <FocusFlowDashboard />\n      <form action=\"/auth/signout\" method=\"post\" className=\"mt-4\">\n        <button type=\"submit\" className=\"bg-red-500 text-white p-2 rounded\">\n          Sign out\n        </button>\n      </form>\n    </main>\n  );\n}"],"names":[],"mappings":";;;;AAAA;AACA;AAEA;AAAA;;;;;AAEe,eAAe;IAC5B,MAAM,WAAW,MAAM,CAAA,GAAA,gIAAA,CAAA,8BAA2B,AAAD;IACjD,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,GAAG,MAAM,SAAS,IAAI,CAAC,UAAU;IAE5D,IAAI,CAAC,SAAS;QACZ,CAAA,GAAA,qLAAA,CAAA,WAAQ,AAAD,EAAE;IACX;IAEA,qBACE,8OAAC;QAAK,WAAU;;0BACd,8OAAC,gJAAA,CAAA,qBAAkB;;;;;0BACnB,8OAAC;gBAAK,QAAO;gBAAgB,QAAO;gBAAO,WAAU;0BACnD,cAAA,8OAAC;oBAAO,MAAK;oBAAS,WAAU;8BAAoC;;;;;;;;;;;;;;;;;AAM5E","debugId":null}}]
}